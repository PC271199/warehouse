package com.example.Warehouse.controllers;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.web.client.RestTemplate;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.Warehouse.dtos.MailContractDto;
import com.example.Warehouse.dtos.ResponseDto;
import com.example.Warehouse.dtos.accountService.AccountDto;
import com.example.Warehouse.dtos.accountService.AccountDtoAdmin;
import com.example.Warehouse.dtos.accountService.AccountEditDto;
import com.example.Warehouse.dtos.accountService.AccountEditDtoAdmin;
import com.example.Warehouse.entities.accountService.Account;
import com.example.Warehouse.exceptions.accountService.ImportFailException;
import com.example.Warehouse.exceptions.accountService.NoAccessRightException;
import com.example.Warehouse.mapper.AccountAdminMapper;
import com.example.Warehouse.mapper.AccountEditDtoAdminMapper;
import com.example.Warehouse.mapper.AccountMapper;
import com.example.Warehouse.services.AccountService;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

// add comment here
@RestController
@RequestMapping(value = "/rest-account")
public class AccountController {
	public static final String encodedKeys = "ZjMyNDg0NWYtYzUyYy00MDg4LWE5ZjYtZmI2Njc1MDkwMjI2OmQ0ZTdjYWVkLTA3NzQtNGNlNS05ZGFlLTRmMzRiMTQ0MTI0Yg==";
	private final ObjectMapper objectMapper = new ObjectMapper();
	@Autowired
	private AccountService accser;
	@Autowired
	private AccountAdminMapper accAdminMap;
	@Autowired
	private AccountEditDtoAdminMapper accEditAdminMap;
	@Autowired
	private AccountMapper accMap;

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts", method = RequestMethod.GET)

	public ResponseEntity<ResponseDto<List<AccountDtoAdmin>>> getAccountList() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		Account thisaccount = accser.getByUserName(authentication.getName());
		if (accser.checkaction(thisaccount.getPermissions(), "ACCOUNT_READ") == false) {
			throw new NoAccessRightException();
		}
		List<Account> accounts = accser.getAll();
		List<AccountDtoAdmin> accountDtos = accAdminMap.toAccountDtoAdmins(accounts);
		ResponseDto<List<AccountDtoAdmin>> result = new ResponseDto<List<AccountDtoAdmin>>(accountDtos,
				HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<List<AccountDtoAdmin>>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts/page/{pageIndex}", method = RequestMethod.GET)
	public ResponseEntity<ResponseDto<Page<AccountDtoAdmin>>> getAccountListByPage(@PathVariable int pageIndex) {
		Page<AccountDtoAdmin> accounts = accser.getAllByPage(pageIndex);
		ResponseDto<Page<AccountDtoAdmin>> result = new ResponseDto<Page<AccountDtoAdmin>>(accounts,
				HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<Page<AccountDtoAdmin>>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts/count", method = RequestMethod.GET)
	public ResponseEntity<ResponseDto<Long>> countAll() {
		long count = accser.countAll();
		ResponseDto<Long> result = new ResponseDto<Long>(count, HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<Long>>(result, HttpStatus.OK);
	}

	@RequestMapping(value = "/accounts/{accountId}", method = RequestMethod.GET)
	public ResponseEntity<ResponseDto<AccountDtoAdmin>> getAccountById(@PathVariable int accountId) {
		Account thisaccount = accser.getById(accountId);
		AccountDtoAdmin accountDto = accAdminMap.toAccountDtoAdmin(thisaccount);
		ResponseDto<AccountDtoAdmin> result = new ResponseDto<AccountDtoAdmin>(accountDto, HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<AccountDtoAdmin>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts", method = RequestMethod.POST)
	public ResponseEntity<ResponseDto<AccountDtoAdmin>> createAccount(
			@Valid @RequestBody AccountDtoAdmin accountDtoAdmin) {
		Account thisAccount = accser.createAccount(accAdminMap.toAccountEntity(accountDtoAdmin));
		AccountDtoAdmin accountDto = accAdminMap.toAccountDtoAdmin(thisAccount);
		ResponseDto<AccountDtoAdmin> result = new ResponseDto<AccountDtoAdmin>(accountDto, HttpStatus.CREATED.value());
		return new ResponseEntity<ResponseDto<AccountDtoAdmin>>(result, HttpStatus.CREATED);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts", method = RequestMethod.PUT)
	public ResponseEntity<ResponseDto<AccountDtoAdmin>> updateAccount(
			@RequestBody AccountEditDtoAdmin accountEditDtoAdmin) {
		Account updatedAccount = accser.updateAccount(accEditAdminMap.toAccountEntity(accountEditDtoAdmin));
		AccountDtoAdmin accountDto = accAdminMap.toAccountDtoAdmin(updatedAccount);
		ResponseDto<AccountDtoAdmin> result = new ResponseDto<AccountDtoAdmin>(accountDto, HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<AccountDtoAdmin>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts/{accountId}", method = RequestMethod.DELETE)
	public ResponseEntity<ResponseDto<Object>> deleteAccountById(@PathVariable int accountId) {
		accser.deleteAccount(accountId);
		ResponseDto<Object> result = new ResponseDto<Object>("Delete successfully", HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<Object>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts", method = RequestMethod.DELETE)
	public ResponseEntity<ResponseDto<Object>> deleteAll() {
		accser.deleteAll();
		ResponseDto<Object> result = new ResponseDto<Object>("Delete successfully", HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<Object>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts/toggleStatus/{accountId}", method = RequestMethod.PUT)
	public ResponseEntity<ResponseDto<Object>> toggleEnabledAccount(@PathVariable int accountId) {
		accser.toggleEnabledAccount(accountId);
		ResponseDto<Object> result = new ResponseDto<Object>("Toggle enabled account successfully",
				HttpStatus.OK.value());
		return new ResponseEntity<ResponseDto<Object>>(result, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/accounts/data", method = RequestMethod.POST)
	public ResponseEntity<Object> importdata() {
		ObjectMapper mapper = new ObjectMapper();
		TypeReference<List<AccountDtoAdmin>> typeReference = new TypeReference<List<AccountDtoAdmin>>() {
		};
		InputStream inputStream = TypeReference.class.getResourceAsStream("/file/data.json");
		try {
			List<AccountDtoAdmin> accounts = mapper.readValue(inputStream, typeReference);
			accser.importAccount(accAdminMap.toAccountEntities(accounts));
		} catch (Exception e) {
			System.out.println(e);
			throw new ImportFailException();
		}
		return new ResponseEntity<Object>("", HttpStatus.OK);
	}

	@RequestMapping(value = "/editUserInfor", method = RequestMethod.PUT)
	public ResponseEntity<ResponseDto<AccountDto>> editUserInfor(@Valid @RequestBody AccountEditDto accountEditDto) {
		Account result = accser.edit(accountEditDto);
		return new ResponseEntity<ResponseDto<AccountDto>>(
				new ResponseDto<AccountDto>(accMap.toAccountDTO(result), HttpStatus.OK.value()), HttpStatus.OK);
	}

	@RequestMapping(value = "/authenDocsign/{code}", method = RequestMethod.POST)
	public ResponseEntity<Object> authenAndSendDocsign(HttpServletRequest request, @PathVariable String code,
			@RequestBody MailContractDto mailContractDto) throws Exception {
		// get accessToken-Docsign
		try {
			HttpHeaders headers = new HttpHeaders();
			String authHeader = "Basic " + encodedKeys;
			headers.set("Authorization", authHeader);
			headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
			// Yêu cầu trả về định dạng JSON
			headers.setContentType(MediaType.APPLICATION_JSON);
			JSONObject object = new JSONObject();
			object.put("code", code);
			object.put("grant_type", "authorization_code");
			HttpEntity<String> entity = new HttpEntity<String>(object.toString(), headers);
			// RestTemplate
			RestTemplate restTemplate = new RestTemplate();
			ResponseEntity<String> response = restTemplate.exchange("https://account-d.docusign.com/oauth/token",
					HttpMethod.POST, entity, String.class);
			JsonNode root = objectMapper.readTree(response.getBody());
			System.out.println(root.get("access_token").asText());
			// send contract
			HttpHeaders headers2 = new HttpHeaders();
			String authHeader2 = "Bearer " + root.get("access_token").asText();
			headers2.set("Authorization", authHeader2);
			headers2.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
			// Yêu cầu trả về định dạng JSON
			headers2.setContentType(MediaType.APPLICATION_JSON);
			JSONObject object2 = new JSONObject();
			List<JSONObject> objectDocumentList = new ArrayList<JSONObject>();
			JSONObject objectDocument = new JSONObject();
			objectDocument.put("documentBase64",
					"");
			objectDocument.put("documentId", "1");
			objectDocument.put("fileExtension", "docx");
			objectDocument.put("name", "document");
			objectDocumentList.add(objectDocument);
			object2.put("documents", new JSONArray(objectDocumentList));
			object2.put("emailSubject", "Simple Signing Example");

			JSONObject objectRecipients = new JSONObject();
			List<JSONObject> singerList = new ArrayList<JSONObject>();
			// singer1
			JSONObject signer1 = new JSONObject();
			System.out.println(mailContractDto.getFrom());
			signer1.put("email", mailContractDto.getFrom());
			signer1.put("name", "cong");
			signer1.put("recipientId", "1");
			JSONObject tab1 = new JSONObject();
			List<JSONObject> signHereTabs1 = new ArrayList<JSONObject>();
			JSONObject signHereTab = new JSONObject();
			signHereTab.put("anchorString", "/sn1/");
			signHereTab.put("anchorXOffset", "10");
			signHereTab.put("anchorYOffset", "10");
			signHereTab.put("anchorUnits", "pixels");
			signHereTab.put("tabId", "1");
			signHereTabs1.add(signHereTab);
			tab1.put("signHereTabs", new JSONArray(signHereTabs1));
			signer1.put("tabs", tab1);
			// singer2
			JSONObject signer2 = new JSONObject();
			signer2.put("email", mailContractDto.getTo());
			signer2.put("name", "cong");
			signer2.put("recipientId", "2");
			JSONObject tab2 = new JSONObject();
			List<JSONObject> signHereTabs2 = new ArrayList<JSONObject>();
			JSONObject signHereTab2 = new JSONObject();
			signHereTab2.put("anchorString", "/sn2/");
			signHereTab2.put("anchorXOffset", "10");
			signHereTab2.put("anchorYOffset", "10");
			signHereTab2.put("anchorUnits", "pixels");
			signHereTab2.put("tabId", "2");
			signHereTabs2.add(signHereTab2);
			tab2.put("signHereTabs", new JSONArray(signHereTabs2));
			signer2.put("tabs", tab2);
			// singerList
			singerList.add(signer1);
			singerList.add(signer2);
			objectRecipients.put("signers", new JSONArray(singerList));
			object2.put("recipients", objectRecipients);
			object2.put("status", "sent");
			HttpEntity<String> entity2 = new HttpEntity<String>(object2.toString(), headers2);
			// RestTemplate
			ResponseEntity<String> response2 = restTemplate.exchange(
					"https://demo.docusign.net/restapi/v2.1/accounts/726c5825-36d7-4b6b-a1c0-f97527c2cac4/envelopes",
					HttpMethod.POST, entity2, String.class);
			JsonNode root2 = objectMapper.readTree(response2.getBody());
			return new ResponseEntity<Object>(root, HttpStatus.OK);
		} catch (Exception e) {
			throw e;
		}

	}

	@RequestMapping(value = "/sendContract/{accessTokenDocsign}", method = RequestMethod.GET)
	public ResponseEntity<Object> testAPI2(@PathVariable String accessTokenDocsign) throws Exception {
		try {
			HttpHeaders headers = new HttpHeaders();
			String authHeader = "Bearer " + accessTokenDocsign;
			headers.set("Authorization", authHeader);
			headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
			// Yêu cầu trả về định dạng JSON
			headers.setContentType(MediaType.APPLICATION_JSON);
			JSONObject object = new JSONObject();
			List<JSONObject> objectDocumentList = new ArrayList<JSONObject>();
			JSONObject objectDocument = new JSONObject();
			objectDocument.put("documentBase64",
					"");
			objectDocument.put("documentId", "1");
			objectDocument.put("fileExtension", "docx");
			objectDocument.put("name", "document");
			objectDocumentList.add(objectDocument);
			object.put("documents", new JSONArray(objectDocumentList));
			object.put("emailSubject", "Simple Signing Example");

			JSONObject objectRecipients = new JSONObject();
			List<JSONObject> singerList = new ArrayList<JSONObject>();
			// singer1
			JSONObject signer1 = new JSONObject();
			signer1.put("email", "phuoccong99@gmail.com");
			signer1.put("name", "cong");
			signer1.put("recipientId", "1");
			JSONObject tab1 = new JSONObject();
			List<JSONObject> signHereTabs1 = new ArrayList<JSONObject>();
			JSONObject signHereTab = new JSONObject();
			signHereTab.put("anchorString", "/sn1/");
			signHereTab.put("anchorXOffset", "10");
			signHereTab.put("anchorYOffset", "10");
			signHereTab.put("anchorUnits", "pixels");
			signHereTab.put("tabId", "1");
			signHereTabs1.add(signHereTab);
			tab1.put("signHereTabs", new JSONArray(signHereTabs1));
			signer1.put("tabs", tab1);
			// singer2
			JSONObject signer2 = new JSONObject();
			signer2.put("email", "lyphuoccong2711@gmail.com");
			signer2.put("name", "cong");
			signer2.put("recipientId", "2");
			JSONObject tab2 = new JSONObject();
			List<JSONObject> signHereTabs2 = new ArrayList<JSONObject>();
			JSONObject signHereTab2 = new JSONObject();
			signHereTab2.put("anchorString", "/sn2/");
			signHereTab2.put("anchorXOffset", "10");
			signHereTab2.put("anchorYOffset", "10");
			signHereTab2.put("anchorUnits", "pixels");
			signHereTab2.put("tabId", "2");
			signHereTabs2.add(signHereTab2);
			tab2.put("signHereTabs", new JSONArray(signHereTabs2));
			signer2.put("tabs", tab2);
			// singerList
			singerList.add(signer1);
			singerList.add(signer2);
			objectRecipients.put("signers", new JSONArray(singerList));
			object.put("recipients", objectRecipients);
			object.put("status", "sent");
			HttpEntity<String> entity = new HttpEntity<String>(object.toString(), headers);
			// RestTemplate
			RestTemplate restTemplate = new RestTemplate();
			ResponseEntity<String> response = restTemplate.exchange(
					"https://demo.docusign.net/restapi/v2.1/accounts/726c5825-36d7-4b6b-a1c0-f97527c2cac4/envelopes",
					HttpMethod.POST, entity, String.class);
			JsonNode root = objectMapper.readTree(response.getBody());
			return new ResponseEntity<Object>(root, HttpStatus.OK);
		} catch (Exception e) {
			throw e;
		}
	}

	@RequestMapping(value = "/test/flask", method = RequestMethod.GET)
	public ResponseEntity<Object> testApiFlask() throws JsonMappingException, JsonProcessingException {
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
		// Yêu cầu trả về định dạng JSON
		headers.setContentType(MediaType.APPLICATION_JSON);
		RestTemplate restTemplate = new RestTemplate();
		HttpEntity<String> entity = new HttpEntity<String>("", headers);
		ResponseEntity<String> response = restTemplate.exchange(
				"http://localhost:5000/api/v1/hello/{a}",
				HttpMethod.GET, entity, String.class,1);
//		JsonNode root = objectMapper.readTree(response.getBody());
		System.out.println(response);
		return new ResponseEntity<Object>(new ResponseDto<Object>("ac", HttpStatus.OK.value()), HttpStatus.OK);
	}

}
